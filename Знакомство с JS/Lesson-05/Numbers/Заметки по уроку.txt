//
//Формулировка задания:
//Переключаемся на основную ветку и от нее создаем новую ветку lesson-05/numbers, в ней выполняем работу 
//В файле script.js создаем 2 переменные для первого и второго числа.
//Создайте 2 переменный, сразу присваиваем через prompt('Введите первое число'), prompt('Введите второе число').
//Выведите в консоль или в алерт их сумму, разность, произведение и частное. Помните, данные полученные в prompt являются строками, и перед тем как получить их сумму, разность, произведение и частное, надо строку преобразовать в число. Внимательно читаем доп материал.
//После пушим ветку на удаленный репозиторий, мержить в основную ветку не надо.
//
//
// 5 урок ТИП данных числа
// 1) Как числовой тип хранится в памяти
// 2) Перевод из двоичной в десятичную формы
// 3) Множество допустимых значений числового типа
// 4) Множество допустимых операций числового типа
// 5) Методы чисел (Number)
// 6) Модуль Math
//
//  Литерал - записанное с клавиатуры число например 53 
// 
//  1 байт  = 8 бит ( 1 бит минимальная единица )
//  Обратится к одному биту мы не можем, можем обратиться только к группе из 8 бит тоесть к одному байту
// 
//  У Байта есть номер по которому мы можем к нему обратиться. Номер в формате 0х0001
// 
//  1) Как числовой тип хранится в памяти
//     - подряд идущие блоки бит. всего выделяется наример в JS выделяется 64 бита(8 байт). под любое число
//     - сами данные начинаются с последнего бита и идут справа налево.
//     - первый бит используется для указания положительного или отрицательного числа. Если число положительное записывается - 0 , если число отрицательное записывается-1
//     - десятичная система исчесления       0 1  2   3   4    5     6    7     8      9 -   10 
//     - двоичная система исчесления 0 1 -   0 1  10  11  100  101   110  111  1000   1001   1011 
//  2) Перевод из двоичной в десятичную формы
//     - перевод из двоичной в десятичную - например 1101 - пронумеровать начиная с правого бита все биты от нуля и далее в нашем случае 0 1 2 3, каждое из написанное число на
//ненулевом бите нужно 2 возвести в степень числа тоесть 2в третей степени = 8, 2во второй степени = 4, 0во второй степени = 1, и все числа складываются 8+4+1=13
//  3) Множество допустимых значений числового типа   
// - это ограничение по самому большому положительному или по самому маленькому отрицательному числу которое можно записать в 63 бита, 63 потому что 1 бит используется для 
// определения положительного или отрицательного числа. Максимальное число это 63 бита в котором записаны везде 1. 
//  4) Множество допустимых операций числового типа 
// - в качестве базы берем - что действие происходит над информацией из одного множества. из одного типа данных. 
// Описание для ЦП конкретных действий или команд которые он должен сделать с памятью.
// Операция сложения может быть выполнена в JS - + сложение - вычитание * умножение / деление, возведение в степень х ** у.  
// Операция сравнения х (>)(<)(==)(!=) y
//  5) Методы чисел (Number)
// Отделение чисел после запятой const number = 3.273223;
// 
// number.toFixed(2);
// console.log(number.toFixed(2));
// 
// console.log(number.toLocaleString('ru-RU', { style: 'currency', currency: 'RUB'}));
// 
// 6) Модуль Math
// Округление чисел 
// 
// Math.round() - классическое математическое округление
// Math.floor() - строгое округление в определенную сторону вниз
// Math.ceil()  - строгое округление в определенную сторону вверх
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 